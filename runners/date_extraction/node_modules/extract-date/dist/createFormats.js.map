{"version":3,"sources":["../src/createFormats.js"],"names":["yearFirstDashSeparator","dateFnsFormat","yearFirstSlashSeparator","yearFirstDotSeparator","direction","yearLastDashSeparator","yearLastDotSeparator","yearLastSlashSeparator","localised","map","combination","join","impliedYearLocalised","impliedYear","relative","test","format","specificity","wordCount","replace","length","yearIsExplicit","includes","sort","a","b","localeCompare"],"mappings":"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","sourcesContent":["// @flow\n\nimport cartesian from 'cartesian';\nimport calculateSpecificity from './calculateSpecificity';\n\nexport default () => {\n  // The reason `yearFirstDashSeparator` and `yearFirstSlashSeparator` formats do not have direction is because\n  // there are no known regions that use yyyy-dd-MM format.\n  // https://en.wikipedia.org/wiki/Date_format_by_country\n  const yearFirstDashSeparator = [\n    {\n      dateFnsFormat: 'yyyy-MM-dd',\n    },\n    {\n      dateFnsFormat: 'yyyy-M-d',\n    },\n  ];\n\n  const yearFirstSlashSeparator = [\n    {\n      dateFnsFormat: 'yyyy/MM/dd',\n    },\n    {\n      dateFnsFormat: 'yyyy/M/d',\n    },\n  ];\n\n  const yearFirstDotSeparator = [\n    {\n      dateFnsFormat: 'yyyy.MM.dd',\n      direction: 'YMD',\n    },\n    {\n      dateFnsFormat: 'yyyy.M.d',\n      direction: 'YMD',\n    },\n    {\n      dateFnsFormat: 'yyyy.dd.MM',\n      direction: 'YDM',\n    },\n    {\n      dateFnsFormat: 'yyyy.d.M',\n      direction: 'YDM',\n    },\n  ];\n\n  const yearLastDashSeparator = [\n    {\n      dateFnsFormat: 'dd-MM-yyyy',\n      direction: 'DMY',\n    },\n    {\n      dateFnsFormat: 'd-M-yyyy',\n      direction: 'DMY',\n    },\n    {\n      dateFnsFormat: 'MM-dd-yyyy',\n      direction: 'MDY',\n    },\n    {\n      dateFnsFormat: 'M-d-yyyy',\n      direction: 'MDY',\n    },\n  ];\n\n  const yearLastDotSeparator = [\n    {\n      dateFnsFormat: 'dd.MM.yyyy',\n      direction: 'DMY',\n    },\n    {\n      dateFnsFormat: 'd.M.yyyy',\n      direction: 'DMY',\n    },\n    {\n      dateFnsFormat: 'MM.dd.yyyy',\n      direction: 'MDY',\n    },\n    {\n      dateFnsFormat: 'M.d.yyyy',\n      direction: 'MDY',\n    },\n    {\n      dateFnsFormat: 'dd.MM.yy',\n      direction: 'DMY',\n    },\n    {\n      dateFnsFormat: 'd.M.yy',\n      direction: 'DMY',\n    },\n  ];\n\n  const yearLastSlashSeparator = [\n    {\n      dateFnsFormat: 'dd/MM/yyyy',\n      direction: 'DMY',\n    },\n    {\n      dateFnsFormat: 'd/M/yyyy',\n      direction: 'DMY',\n    },\n    {\n      dateFnsFormat: 'MM/dd/yyyy',\n      direction: 'MDY',\n    },\n    {\n      dateFnsFormat: 'M/d/yyyy',\n      direction: 'MDY',\n    },\n    {\n      dateFnsFormat: 'MM/dd/yy',\n      direction: 'MDY',\n    },\n    {\n      dateFnsFormat: 'dd/MM/yy',\n      direction: 'DMY',\n    },\n    {\n      dateFnsFormat: 'd/M/yy',\n      direction: 'DMY',\n    },\n    {\n      dateFnsFormat: 'M/d/yy',\n      direction: 'MDY',\n    },\n  ];\n\n  const localised = [\n    {\n      dateFnsFormat: 'MMMM d yyyy',\n    },\n    {\n      dateFnsFormat: 'MMMM do yyyy',\n    },\n    ...cartesian([\n      [\n        'do',\n        'd',\n      ],\n      [\n        'MMMM',\n        'MMM',\n      ],\n      [\n        'yyyy',\n      ],\n    ])\n      .map((combination) => {\n        return {\n          dateFnsFormat: combination.join(' '),\n        };\n      }),\n    ...cartesian([\n      [\n        'MMMM',\n        'MMM',\n      ],\n      [\n        'yyyy',\n      ],\n      [\n        'do',\n        'd',\n      ],\n    ])\n      .map((combination) => {\n        return {\n          dateFnsFormat: combination.join(' '),\n        };\n      }),\n    {\n      dateFnsFormat: 'MMMM yyyy EEE do',\n    },\n    {\n      dateFnsFormat: 'MMMM yyyy EEE d',\n    },\n  ];\n\n  const impliedYearLocalised = [\n    ...cartesian([\n      [\n        'EEEE',\n        'EEE',\n      ],\n      [\n        'MMMM',\n        'MMM',\n      ],\n      [\n        'dd',\n        'do',\n        'd',\n      ],\n    ])\n      .map((combination) => {\n        return {\n          dateFnsFormat: combination.join(' '),\n        };\n      }),\n    ...cartesian([\n      [\n        'EEEE',\n        'EEE',\n      ],\n      [\n        'dd',\n        'do',\n        'd',\n      ],\n      [\n        'MMMM',\n        'MMM',\n      ],\n    ])\n      .map((combination) => {\n        return {\n          dateFnsFormat: combination.join(' '),\n        };\n      }),\n    ...cartesian([\n      [\n        'MMMM',\n        'MMM',\n      ],\n      [\n        'dd',\n        'do',\n        'd',\n      ],\n    ])\n      .map((combination) => {\n        return {\n          dateFnsFormat: combination.join(' '),\n        };\n      }),\n    ...cartesian([\n      [\n        'dd',\n        'do',\n        'd',\n      ],\n      [\n        'MMMM',\n        'MMM',\n      ],\n    ])\n      .map((combination) => {\n        return {\n          dateFnsFormat: combination.join(' '),\n        };\n      }),\n  ];\n\n  const impliedYear = [\n    ...cartesian([\n      [\n        'dd',\n        'd',\n      ],\n      [\n        '/',\n        '-',\n        '.',\n      ],\n      [\n        'MM',\n        'M',\n      ],\n    ])\n      .map((combination) => {\n        return {\n          dateFnsFormat: combination.join(''),\n          direction: 'DM',\n        };\n      }),\n    ...cartesian([\n      [\n        'MM',\n        'M',\n      ],\n      [\n        '/',\n        '-',\n        '.',\n      ],\n      [\n        'dd',\n        'd',\n      ],\n    ])\n      .map((combination) => {\n        return {\n          dateFnsFormat: combination.join(''),\n          direction: 'MD',\n        };\n      }),\n  ];\n\n  const relative = [\n    {\n      dateFnsFormat: 'R',\n      test: false,\n    },\n    {\n      dateFnsFormat: 'EEEE',\n    },\n    {\n      dateFnsFormat: 'EEE',\n    },\n  ];\n\n  return [\n    {\n      dateFnsFormat: 'yyyyMMdd',\n    },\n    ...yearFirstDashSeparator,\n    ...yearFirstDotSeparator,\n    ...yearFirstSlashSeparator,\n    ...yearLastDashSeparator,\n    ...yearLastDotSeparator,\n    ...yearLastSlashSeparator,\n    ...localised,\n    ...impliedYearLocalised,\n    ...impliedYear,\n    ...relative,\n  ]\n    .map((format) => {\n      return {\n        localised: /eee|mmm/i.test(format.dateFnsFormat),\n        specificity: calculateSpecificity(format.dateFnsFormat),\n        wordCount: format.dateFnsFormat.replace(/[^ ]/g, '').length + 1,\n        yearIsExplicit: format.dateFnsFormat.includes('yyyy'),\n        ...format,\n      };\n    })\n    .sort((a, b) => {\n      if (a.wordCount !== b.wordCount) {\n        return b.wordCount - a.wordCount;\n      }\n\n      if (b.specificity === a.specificity) {\n        return a.dateFnsFormat.localeCompare(b.dateFnsFormat);\n      }\n\n      return b.specificity - a.specificity;\n    });\n};\n"],"file":"createFormats.js"}